const { Client, Intents, GatewayIntentBits, EmbedBuilder } = require('discord.js');
const { REST } = require('@discordjs/rest');
const { Routes } = require('discord-api-types/v9');

const confDiscord = require('../config/discord.json');

const client = new Client({ intents: [GatewayIntentBits.Guilds] });
const token = confDiscord["token"];
const clientId = confDiscord["clientId"];

const axios = require('axios');

const commands = [
    {
        name: 'ping',
        description: 'Replies with Pong!'
    },
    {
        name: 'balances',
        description: 'Show money in reserve'
    },
    {
        name: 'register',
        description: 'Register a node',
        options: [
            {
                name: 'uuid',
                type: 3,
                description: 'This must contain the uuid provided by earnapp',
                required: true
            },
            {
                name: 'address',
                type: 3,
                description: 'This must contain the address to which payments will be sent (XNO, XDG, BAN, ANA)',
                required: true
            }
        ]
    },
    {
        name: 'withdraw',
        description: 'Withdraw your winnings 🤑',
        options: [
            {
                name: 'address',
                type: 3,
                description: 'This must contain your address 🙃',
                required: false
            }
        ]
    },
    {
        name: 'link',
        description: 'Link your node 🏆',
        options: [
            {
                name: 'uuid',
                type: 3,
                description: 'This must contain the uuid of your node 🙃',
                required: true
            }
        ]
    },
    {
        name: 'stats',
        description: 'Your Stats',
        options: [
            {
                name: 'address',
                type: 3,
                description: 'This must contain your address 🙃',
                required: false
            }
        ]
    }
];

const rest = new REST({ version: '9' }).setToken(token);

(async () => {
    try {
        console.log('Started refreshing application (/) commands.');

        await rest.put(
            Routes.applicationCommands(clientId),
            { body: commands },
        );

        console.log('Successfully reloaded application (/) commands.');
    } catch (error) {
        console.error(error);
    }
})();

client.on('interactionCreate', async interaction => {
    if (!interaction.isCommand()) return;
    const userId = interaction.user.id;
    console.log(userId);

    const { commandName, options } = interaction;

    if (commandName === 'ping') {
        await interaction.reply('Pong!');
    } else if (commandName === 'register') {
        const uuid = options.getString('uuid');
        const address = options.getString('address');
        const data = {
            action: 'register',
            uuid: uuid,
            add: address,
            discord: userId
        };

        const loadingEmbed = new EmbedBuilder()
            .setColor('#F1C40F')
            .setTitle('Chargement en cours 🛒');

        await interaction.reply({ embeds: [loadingEmbed], ephemeral: true });

        try {
            const response = await axios.post('http://localhost:3000/', data);
            console.log(response.data);

            if (response.data) {
                let result = response.data["status"];

                if (response.data["code"] == 200) {
                    
                    const successEmbed = new EmbedBuilder()
                        .setColor('#00C802')
                        .setTitle("Welcome among us 🚀")
                        .setDescription('Rewards generated by `' + uuid + '`will now be sent to `' + address + '` 👀')
                        .addFields({ name: 'You can use:', value: '`/stats` and `/withdraw`', inline: true });

                    await interaction.editReply({ embeds: [successEmbed] });
                }
                else if (response.data["code"] == 100) {
                    const invalidAddressEmbed = new EmbedBuilder()
                        .setColor('#FF0000')
                        .setTitle("The address entered is invalid 😭")
                        .setDescription('Supported cryptos are Nano, Banano, Ananos, Dogenano');

                    await interaction.editReply({ embeds: [invalidAddressEmbed] });
                }
                else if (response.data["code"] == 201) {
                    const invalidUUIDEmbed = new EmbedBuilder()
                        .setColor('#FF0000')
                        .setTitle("The UUID entered is invalid 😭")
                        .setDescription('The UUID entered is invalid, if you need help do not hesitate: `contact@myecoria.com`');

                    await interaction.editReply({ embeds: [invalidUUIDEmbed] });
                }
                else if (response.data["code"] == 105) {
                    const invalidUUIDEmbed = new EmbedBuilder()
                        .setColor('#FF0000')
                        .setTitle("The address is too short 😭")
                        .setDescription('The given address is too short, so it is wrong, if you need help do not hesitate: `contact@myecoria.com`');

                    await interaction.editReply({ embeds: [invalidUUIDEmbed] });
                }
                else if (response.data["code"] == 30) {
                    const invalidUUIDEmbed = new EmbedBuilder()
                        .setColor('#FF0000')
                        .setTitle("The node is already registered 😭")
                        .setDescription('The node is already registered to another account, if you need help do not hesitate: `contact@myecoria.com`');

                    await interaction.editReply({ embeds: [invalidUUIDEmbed] });
                }
                else if (response.data["code"] == 31) {
                    const invalidUUIDEmbed = new EmbedBuilder()
                        .setColor('#FF0000')
                        .setTitle("The device is not found 😭")
                        .setDescription('The device is not found, if you need help do not hesitate: `contact@myecoria.com`');

                    await interaction.editReply({ embeds: [invalidUUIDEmbed] });
                }
                else if (response.data["code"] == 54) {
                    const invalidUUIDEmbed = new EmbedBuilder()
                        .setColor('#FF0000')
                        .setTitle("You already have an account for this address 😭")
                        .setDescription('We only use one account per address 👀');

                    await interaction.editReply({ embeds: [invalidUUIDEmbed] });
                }
                else if (response.data["code"] == 53) {
                    const invalidUUIDEmbed = new EmbedBuilder()
                        .setColor('#FF0000')
                        .setTitle("You already have an account for this UUIS 😭")
                        .setDescription('We only use one account per UUID 👀');

                    await interaction.editReply({ embeds: [invalidUUIDEmbed] });
                }
            }
            else {
                await interaction.editReply('Error: Empty response data');
            }
        }
        catch (error) {
            console.error(error);
        }
    } else if (commandName === 'stats') {

         // Envoyer l'embed de chargement en cours
         const loadingEmbed = new EmbedBuilder()
            .setColor('#00C802')
            .setTitle('Chargement en cours 🛒');
         const loadingMessage = await interaction.reply({ embeds: [loadingEmbed] });

        let address;
        if (options.getString('address')) {
            address = options.getString('address');
            statusAdd = true;
        } else {
            try {
                const response = await axios.get('http://localhost:3000/discord/' + userId);
                console.log(response.data);
                if (response.data["code"]) {
                    // Mettre à jour l'embed avec les résultats de la requête
                    const statsEmbed = new EmbedBuilder()
                        .setColor('#00C802')
                        .setTitle("Your node is not connected to your Discord 😭")
                        .setDescription('Please either provide your address or link your node with the `/link` command 😓')
                    await loadingMessage.edit({ embeds: [statsEmbed] });
                    statusAdd = false;
                } else {
                    address = response.data["address"];
                    statusAdd = true;
                }
            } catch (error) {
                console.error(error);
            }
        }

        if (statusAdd) {

            // Faire la requête et récupérer les résultats
            try {
                const response = await axios.get('http://localhost:3000/user/' + address);
                console.log(response.data);

                if (response.data) {
                    if (response.data["code"] == 200) {
                        const rate = response.data["rateCrypto"] + ' ' + response.data["coin"];
                        const total = response.data["earned_crypto"] + ' ' + response.data["coin"];
                        const withdraw = response.data["notPaidCrypto"] + ' ' + response.data["coin"];
                        const bandInBytes = parseInt(response.data["total_bw"]);
                        const bandInGB = (bandInBytes / 1000000000).toFixed(5);
                        const bandStr = `${bandInGB} GB`;


                        // Mettre à jour l'embed avec les résultats de la requête
                        const statsEmbed = new EmbedBuilder()
                            .setColor('#00C802')
                            .setTitle("Your stats 🏆")
                            .setDescription('Welcome to your stats 👋')
                            .addFields(
                                { name: 'Gain per GB', value: rate },
                                { name: 'Total Generated', value: total, inline: true },
                                { name: 'Unclaimed', value: withdraw, inline: true },
                                { name: 'Bandwidth', value: bandStr, inline: true },
                            )
                        await loadingMessage.edit({ embeds: [statsEmbed] });

                    } 
                    if (response.data["code"] == 100) {
                        const exampleEmbed = new EmbedBuilder()
                            .setColor('#FF0000')
                            .setTitle("The address entered is invalid 😭")
                            .setDescription('Supported cryptos are Nano, Banano, Ananos, Dogenano')
                            await loadingMessage.edit({ embeds: [exampleEmbed] });
                    }
                    if (response.data["code"] == 201) {
                        const exampleEmbed = new EmbedBuilder()
                            .setColor('#FF0000')
                            .setTitle("The UUID entered is invalid 😭")
                            .setDescription('The UUID entered is invalid, if you need help do not hesitate: `contact@myecoria.com`')
                            await loadingMessage.edit({ embeds: [exampleEmbed] });
                    }
                    if (response.data["code"] == 500) {
                        const exampleEmbed = new EmbedBuilder()
                            .setColor('#FF0000')
                            .setTitle("The address entered is not found 😭")
                            .setDescription('Supported cryptos are Nano, Banano, Ananos, Dogenano')
                            await loadingMessage.edit({ embeds: [exampleEmbed] });
                    }
                } else {
                    await loadingMessage.edit('Error: Empty response data');
                }
            } catch (error) {
                console.error(error);
            }

        }
        
    } else if (commandName === 'withdraw') {


        // Envoyer l'embed de chargement en cours
        const loadingEmbed = new EmbedBuilder()
            .setColor('#00C802')
            .setTitle('Chargement en cours 🛒');
        const loadingMessage = await interaction.reply({ embeds: [loadingEmbed] });

        let address;
        if (options.getString('address')) {
            address = options.getString('address');
            statusAdd = true;
        } else {
            try {
                const response = await axios.get('http://localhost:3000/discord/' + userId);
                console.log(response.data);
                if (response.data["code"]) {
                    // Mettre à jour l'embed avec les résultats de la requête
                    const statsEmbed = new EmbedBuilder()
                        .setColor('#00C802')
                        .setTitle("Your node is not connected to your Discord 😭")
                        .setDescription('Please either provide your address or link your node with the `/link` command 😓')
                    await loadingMessage.edit({ embeds: [statsEmbed] });
                    statusAdd = false;
                } else {
                    address = response.data["address"];
                    statusAdd = true;
                }
            } catch (error) {
                console.error(error);
            }
        }

        if (statusAdd) {
            // Faire la requête et récupérer les résultats
            try {
                const response = await axios.get('http://localhost:3000/withdraw/' + address);
                console.log(response.data);

                if (response.data) {
                    if (response.data["code"] == 200) {
                        const hash = response.data["hash"];
                        let baseUrl;
                        if (address.substring(0, 5) =="nano_") {
                            baseUrl = 'https://nanolooker.com/block/';
                        } else if (address.substring(0, 4) =="ban_") {
                            baseUrl = 'https://creeper.banano.cc/hash/';
                        } else if (address.substring(0, 4) =="xdg_") {
                            baseUrl = 'https://explorer.dogenano.io/block/';
                        } else if (address.substring(0, 4) =="ana_") {
                            baseUrl = 'https://ananault.lightcord.org/transaction/';
                        } 
                        const url = baseUrl + hash;


                        // Mettre à jour l'embed avec les résultats de la requête
                        const statsEmbed = new EmbedBuilder()
                            .setColor('#00C802')
                            .setTitle("Your payment 🏆")
                            .setDescription('Your payment is on the way, the TGV arrives in your wallet in less than a second 🚄')
                            .setURL(url)
                            .addFields(
                                { name: 'Hash', value: hash },
                            )
                        await loadingMessage.edit({ embeds: [statsEmbed] });

                    } 
                    if (response.data["code"] == 302) {
                        const exampleEmbed = new EmbedBuilder()
                            .setColor('#FF0000')
                            .setTitle("The address entered is invalid 😭")
                            .setDescription('Supported cryptos are Nano, Banano, Ananos, Dogenano')
                            await loadingMessage.edit({ embeds: [exampleEmbed] });
                    }
                    if (response.data["code"] == 301) {
                        const exampleEmbed = new EmbedBuilder()
                            .setColor('#FF0000')
                            .setTitle("The address was not found 😭")
                            .setDescription('The address is not in our db, if you have a problem you can contact me by discord or: `contact@myecoria.com`')
                            await loadingMessage.edit({ embeds: [exampleEmbed] });
                    }
                    if (response.data["code"] == 300) {
                        const exampleEmbed = new EmbedBuilder()
                            .setColor('#FF0000')
                            .setTitle("The minimum withdrawal is $0.0001 😭")
                            .setDescription('We set this limit to prevent spam 👀')
                            await loadingMessage.edit({ embeds: [exampleEmbed] });
                    }
                } else {
                    await loadingMessage.edit('Error: Empty response data');
                }
            } catch (error) {
                console.error(error);
            }
        }

    } else if (commandName === 'link') {

        // Envoyer l'embed de chargement en cours
        const loadingEmbed = new EmbedBuilder()
           .setColor('#00C802')
           .setTitle('Chargement en cours 🛒');
        const loadingMessage = await interaction.reply({ embeds: [loadingEmbed] });

       let address;
       
       try {
            const response = await axios.get('http://localhost:3000/discord/' + userId);
            console.log(response.data);
            if (response.data["code"]) {
                
                statusAdd = true;

            } else {
                address = response.data["address"];
                // Mettre à jour l'embed avec les résultats de la requête
                const statsEmbed = new EmbedBuilder()
                    .setColor('#00C802')
                    .setTitle("Your account is already connected to a node 😭")
                    .setDescription('We will only allow one node per account for now 😓')
                await loadingMessage.edit({ embeds: [statsEmbed] });
                statusAdd = false;
            }
        } catch (error) {
            console.error(error);
        }

       if (statusAdd) {

            const uuid = options.getString('uuid');
            const data = {
                action: 'discord',
                uuid: uuid,
                discord: userId
            };

           // Faire la requête et récupérer les résultats
           try {
                const response = await axios.post('http://localhost:3000/', data);
                console.log(response.data);

               if (response.data) {
                   if (response.data["code"] == 493) {
                       


                       // Mettre à jour l'embed avec les résultats de la requête
                       const statsEmbed = new EmbedBuilder()
                           .setColor('#00C802')
                           .setTitle("Well done! 🏆")
                           .setDescription('Your node is now linked to your discord account, no more need to specify the address 🚀')
                       await loadingMessage.edit({ embeds: [statsEmbed] });

                   } else if (response.data["code"] = 494) {
                         // Mettre à jour l'embed avec les résultats de la requête
                       const statsEmbed = new EmbedBuilder()
                            .setColor('#00C802')
                            .setTitle("The uuid is already linked to an account !")
                            .setDescription('We cannot link a UUID to multiple accounts 😭')
                        await loadingMessage.edit({ embeds: [statsEmbed] });
                   } else if (response.data["code"] = 492) {
                        // Mettre à jour l'embed avec les résultats de la requête
                        const statsEmbed = new EmbedBuilder()
                            .setColor('#00C802')
                            .setTitle("The uuid is not in the DB !")
                            .setDescription("We can't find your account, use `/register` for registrations 😭")
                        await loadingMessage.edit({ embeds: [statsEmbed] });
                    } 
               } else {
                   await loadingMessage.edit('Error: Empty response data');
               }
           } catch (error) {
               console.error(error);
           }

       }
       
   } else if (commandName === 'balances') {

        // Envoyer l'embed de chargement en cours
        const loadingEmbed = new EmbedBuilder()
            .setColor('#00C802')
            .setTitle('Chargement en cours 🛒');
        const loadingMessage = await interaction.reply({ embeds: [loadingEmbed] });

        try {
            const response = await axios.get('http://localhost:3000/balances/');
            console.log(response.data);
            // Mettre à jour l'embed avec les résultats de la requête
            const balanceNano = response.data["nano"] / 1000000000000000000000000000000;
            const balanceAnanos = response.data["ananos"] / 100000000000000000000000000000;
            const balanceDogenano = response.data["dogenano"] / 100000000000000000000000000;
            const balanceBanano = response.data["banano"] / 100000000000000000000000000000;

            const statsEmbed = new EmbedBuilder()
                .setColor('#00C802')
                .setTitle("Money in reserve 👀")
                .setDescription('Nano: ' + balanceNano + '\n' + 'Ananos: ' + balanceAnanos + '\n' + 'DogeNano: ' + balanceDogenano + '\n' + 'Banano: ' + balanceBanano )
            await loadingMessage.edit({ embeds: [statsEmbed] });
        } catch (error) {
            console.error(error);
        }

   }
});

client.login(token);
